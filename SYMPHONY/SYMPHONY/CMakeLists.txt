cmake_minimum_required(VERSION 2.8)

project(Symphony)

option(SYMPHONY_BUILD_EXAMPLES "Enable the building of examples" OFF)
set(SYMPHONY_VERSION_MAJOR   "5" CACHE STRING "The Symphony major version number")
set(SYMPHONY_VERSION_MINOR   "5" CACHE STRING "The Symphony minor version number")
set(SYMPHONY_VERSION_RELEASE "7" CACHE STRING "The Symphony patch version number")
set(SYMPHONY_VERSION "${SYMPHONY_VERSION_MAJOR}.${SYMPHONY_VERSION_MINOR}.${SYMPHONY_VERSION_RELEASE}")
set(SYMPHONY_SVN_REV "${SYMPHONY_VERSION_RELEASE}")

# Symphony part

add_definitions(-DSYMPHONY_BUILD -DHAVE_CONFIG_H)

remove_definitions(-DCOINUTILS_BUILD)
remove_definitions(-DCLP_BUILD)
remove_definitions(-DCBC_BUILD)
remove_definitions(-DCGL_BUILD)
remove_definitions(-DOSI_BUILD)

if (WIN32)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE)
else ()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wparentheses -Wreturn-type -Wcast-qual -Wall -Wpointer-arith -Wwrite-strings -Wconversion -Wno-unknown-pragmas -Wno-long-long -Wno-unknown-pragmas -Wno-write-strings -Wno-sign-compare -Wno-cast-qual") #-pedantic-errors
endif ()

configure_file(${CMAKE_SOURCE_DIR}/SYMPHONY/include/config.h.in     ${CMAKE_BINARY_DIR}/SYMPHONY/include/config.h)
configure_file(${CMAKE_SOURCE_DIR}/SYMPHONY/include/config_sym.h.in ${CMAKE_BINARY_DIR}/SYMPHONY/include/config_sym.h)

set(Symphony_SRC_LIST_Headers ${SYMPHONY_DIR}/SYMPHONY/include/sym_constants.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_macros.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_types.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cg.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cg_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cg_u.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cp.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cp_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_cp_u.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_dg.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_dg_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_dg_u.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_lp.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_lp_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_lp_solver.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_lp_u.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_master.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_master_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_master_u.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_messages.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_pack_array.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_pack_cut.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_proccomm.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_proto.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_qsort.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/symphony.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/symphony_api.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_timemeas.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_tm.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_tm_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_primal_heuristics.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_prep.h 
                              ${SYMPHONY_DIR}/SYMPHONY/include/sym_prep_params.h
                              ${SYMPHONY_DIR}/SYMPHONY/include/SymConfig.h)

if (SYMPHONY_VERSION VERSION_LESS "5.5.4")
  # This file has been removed in Symphony-5.5.4
  set(Symphony_SRC_LIST_Headers ${Symphony_SRC_LIST_Headers}
                                ${SYMPHONY_DIR}/SYMPHONY/include/sym_return_values.h)
endif()

if (USE_CL)
  set(Symphony_SRC_LIST_Headers ${Symphony_SRC_LIST_Headers}
                                {SYMPHONY_DIR}/SYMPHONY/include/sym_win32_time.h)
endif ()

set(SYM_MASTER_SRC ${SYMPHONY_DIR}/SYMPHONY/src/Master/master.c 
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_wrapper.c
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_io.c
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_func.c
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_prep.c
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_prep_base.c
                   ${SYMPHONY_DIR}/SYMPHONY/src/Master/master_prep_sr.c)

set(MASTER_SRC ${SYM_MASTER_SRC})

set(MASTER_MAIN_SRC ${SYMPHONY_DIR}/SYMPHONY/src/Master/main.c)

set(DG_SRC ${SYMPHONY_DIR}/SYMPHONY/src/DrawGraph/draw_graph.c)

set(SYM_TM_SRC ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_func.c
               ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_proccomm.c)

if (SYM_COMPILE_IN_TM)
  set(TM_SRC ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_func.c
             ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_proccomm.c)
else ()
  set(TM_SRC ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/treemanager.c
             ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_func.c
             ${SYMPHONY_DIR}/SYMPHONY/src/TreeManager/tm_proccomm.c)
endif ()

set(SYM_LP_SRC ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_solver.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_varfunc.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_rowfunc.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_genfunc.c 
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_proccomm.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_wrapper.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_free.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_heuristics.c
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_sp.c)

if (PSEUDO_COSTS)
  set(SYM_LP_SRC ${SYM_LP_SRC}
                 ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_pseudo_branch.c)
else ()
  set(SYM_LP_SRC ${SYM_LP_SRC}
                 ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_branch.c)
endif ()

set(SYM_CG_SRC ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_func.c
               ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_wrapper.c)

set(SYM_CP_SRC ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_proccomm.c
               ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_func.c
               ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_wrapper.c)

if (SYM_COMPILE_IN_LP)
  add_definitions(-DCOMPILE_IN_LP)
  set(TM_SRC ${TM_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_solver.c
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_varfunc.c
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_rowfunc.c
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_genfunc.c)
  set(TM_SRC ${TM_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_proccomm.c
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_wrapper.c
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_free.c)
  if (PSEUDO_COSTS)
    set(TM_SRC ${TM_SRC}
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_pseudo_branch.c)
  else ()
    set(TM_SRC ${TM_SRC}
               ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_branch.c)
  endif ()
  if (SYM_COMPILE_IN_CG)
    set(TM_SRC ${TM_SRC}
               ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_func.c
               ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_wrapper.c)
  endif ()
else()
  set(MASTER_SRC ${MASTER_SRC}
                 ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_solver.c)
endif ()

if (SYM_COMPILE_IN_CP)
  add_definitions(-DCOMPILE_IN_CP)
  set(TM_SRC ${TM_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_proccomm.c
             ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_func.c
             ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_wrapper.c)
endif ()
if (SYM_COMPILE_IN_TM)
  add_definitions(-DCOMPILE_IN_TM)
  set(MASTER_SRC ${MASTER_SRC}
                 ${TM_SRC})
endif ()

set(LP_SRC ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_solver.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_varfunc.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_rowfunc.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_genfunc.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_proccomm.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_wrapper.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_free.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_heuristics.c
           ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_sp.c)

if (PSEUDO_COSTS)
  set(LP_SRC ${LP_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_pseudo_branch.c)
else ()
  set(LP_SRC ${LP_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/LP/lp_branch.c)
endif ()

if (SYM_COMPILE_IN_CG)
  add_definitions(-DCOMPILE_IN_CG)
  set(LP_SRC ${LP_SRC}
             ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_func.c
             ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_wrapper.c)
endif ()

set(CP_SRC ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cut_pool.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_proccomm.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_func.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutPool/cp_wrapper.c)

set(CG_SRC ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cut_gen.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_proccomm.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_func.c
           ${SYMPHONY_DIR}/SYMPHONY/src/CutGen/cg_wrapper.c)

set(QSORT_SRC     ${SYMPHONY_DIR}/SYMPHONY/src/Common/sym_qsort.c)
set(TIME_SRC      ${SYMPHONY_DIR}/SYMPHONY/src/Common/timemeas.c)
set(PROCCOMM_SRC  ${SYMPHONY_DIR}/SYMPHONY/src/Common/proccomm.c)
set(PACKCUT_SRC   ${SYMPHONY_DIR}/SYMPHONY/src/Common/pack_cut.c)
set(PACKARRAY_SRC ${SYMPHONY_DIR}/SYMPHONY/src/Common/pack_array.c)

set(EXAMPLES_SRC ${SYMPHONY_DIR}/SYMPHONY/Examples/bicriteria.c
                 ${SYMPHONY_DIR}/SYMPHONY/Examples/milpOsi.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/milpOsi2.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/milp.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/milp2.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/sensitivity.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start1.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start2.c
		 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start3.c)

set(OSISYM_SRC ${SYMPHONY_DIR}/SYMPHONY/src/OsiSym/OsiSymSolverInterface.cpp
               ${SYMPHONY_DIR}/SYMPHONY/src/OsiSym/SymWarmStart.cpp)

set(BB_SRC ${MASTER_SRC}
           ${DG_SRC}
           ${TM_SRC}
           ${LP_SRC}
           ${CP_SRC}
           ${CG_SRC}
           ${QSORT_SRC}
           ${TIME_SRC}
           ${PROCCOMM_SRC}
           ${PACKCUT_SRC}
           ${PACKARRAY_SRC}) 

set(ALL_SRC ${BB_SRC})

set(ALL_SYM_MASTER ${SYM_MASTER_SRC}
                   ${SYM_TM_SRC}
                   ${SYM_LP_SRC}
                   ${SYM_CG_SRC}
                   ${SYM_CP_SRC}
                   ${TIME_SRC}
                   ${QSORT_SRC}
                   ${PROCCOMM_SRC}
                   ${PACKCUT_SRC}
                   ${PACKARRAY_SRC})

set(ALL_MASTER ${MASTER_SRC}
               ${TIME_SRC}
               ${QSORT_SRC}
               ${PROCCOMM_SRC}
               ${PACKCUT_SRC}
               ${PACKARRAY_SRC})

set(ALL_LP ${LP_SRC}
           ${TIME_SRC}
           ${QSORT_SRC}
           ${PROCCOMM_SRC}
           ${PACKCUT_SRC}
           ${PACKARRAY_SRC})

set(ALL_TM ${TM_SRC}
           ${TIME_SRC}
           ${PROCCOMM_SRC}
           ${PACKCUT_SRC}
           ${PACKARRAY_SRC})

if (SYM_COMPILE_IN_LP)
  set(ALL_TM ${ALL_TM}
             ${QSORT_SRC})
endif ()

set(ALL_CG ${CG_SRC}
           ${TIME_SRC}
           ${QSORT_SRC}
           ${PROCCOMM_SRC}
           ${PACKCUT_SRC})

set(ALL_CP ${CP_SRC}
           ${TIME_SRC}
           ${QSORT_SRC}
           ${PROCCOMM_SRC}
           ${PACKCUT_SRC})

set(MAIN_SRC ${MASTER_MAIN_SRC})

if (USE_COINOR_BIN)
  include_directories(${COINOR_DIR}/include)
  
  add_library(libCoinUtils STATIC IMPORTED)
  add_library(libClp       STATIC IMPORTED)
  add_library(libOsi       STATIC IMPORTED)
  add_library(libOsiClp    STATIC IMPORTED)
  add_library(libCgl       STATIC IMPORTED)

  if (WIN32)
    set_property(TARGET libCoinUtils PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libCoinUtils.lib)
    set_property(TARGET libClp       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libClp.lib)
    set_property(TARGET libOsi       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libOsi.lib)
    set_property(TARGET libOsiClp    PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libOsiClp.lib)
    set_property(TARGET libCgl       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libCl.lib)
  else ()
    set_property(TARGET libCoinUtils PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libCoinUtils.a)
    set_property(TARGET libClp       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libClp.a)
    set_property(TARGET libOsi       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libOsi.a)
    set_property(TARGET libOsiClp    PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libOsiClp.a)
    set_property(TARGET libCgl       PROPERTY IMPORTED_LOCATION ${COINOR_DIR}/lib/libCl.a)
  endif ()
else ()
  include_directories(${CMAKE_BINARY_DIR}/CoinUtils/include)
  include_directories(${CMAKE_BINARY_DIR}/Cgl/include)
  include_directories(${CMAKE_BINARY_DIR}/Clp/include)
endif ()

macro(set_include_directories TARGET)
  if (USE_COINOR_BIN)
    target_include_directories(${TARGET} BEFORE PRIVATE ${COINOR_DIR}/include)
  else ()
    target_include_directories(${TARGET} BEFORE PRIVATE ${CMAKE_BINARY_DIR}/CoinUtils/include)
    target_include_directories(${TARGET} BEFORE PRIVATE ${CMAKE_BINARY_DIR}/Cgl/include)
    target_include_directories(${TARGET} BEFORE PRIVATE ${CMAKE_BINARY_DIR}/Clp/include)
  endif ()
  
  target_include_directories(${TARGET} BEFORE PRIVATE ${CMAKE_BINARY_DIR}/SYMPHONY/include)
endmacro()

set_source_files_properties(${EXAMPLES_SRC} PROPERTIES LANGUAGE CXX)
set_source_files_properties(${MAIN_SRC} PROPERTIES LANGUAGE CXX)
set_source_files_properties(${ALL_SYM_MASTER} PROPERTIES LANGUAGE CXX)

if (ENABLE_SHARED_LIBRARIES)
  add_library(libSym    SHARED ${ALL_SYM_MASTER})
  add_library(libOsiSym SHARED ${OSISYM_SRC})
else ()
  add_library(libSym    STATIC ${ALL_SYM_MASTER})
  add_library(libOsiSym STATIC ${OSISYM_SRC})
endif ()

set_include_directories(libSym)
set_include_directories(libOsiSym)

macro(add_example Name)
  add_executable(${Name} ${ARGN})
  target_link_libraries(${Name} libSym libCgl libOsiClp libOsi libClp libCoinUtils)
  set_include_directories(${Name})
  if (COIN_HAS_LAPACK)
    target_link_libraries(${Name} lapack)
  endif ()
  if (COIN_HAS_BLAS)
    target_link_libraries(${Name} blas)
  endif ()
  if ((COIN_HAS_BLAS OR COIN_HAS_LAPACK) AND UNIX)
    target_link_libraries(${Name} gfortran)
  endif ()
  if (COINUTILS_HAS_ZLIB)
    target_link_libraries(${Name} ${ZLIB_NAME})
  endif ()
  if (COINUTILS_HAS_BZLIB)
    target_link_libraries(${Name} ${BZLIB_NAME})
  endif ()
  if (COIN_HAS_GLPK)
    target_link_libraries(${Name} glpk)
  endif ()
  if (COIN_HAS_AMD)
    target_link_libraries(${Name} amd)
  endif ()
  if (COIN_HAS_CHOLDMOD)
    target_link_libraries(${Name} cholmod)
  endif ()
  if (USE_OPENMP AND UNIX)
    target_link_libraries(${Name} gomp)
  endif ()
  if (COINUTILS_USE_THREADS)
    if (NOT WIN32)
      target_link_libraries(${Name} pthread)
    else ()
      target_link_libraries(${Name} pthreadVC2)
    endif ()
  endif ()
endmacro ()

add_example(symphony ${MAIN_SRC})
#symphony_CPPFLAGS = $(SYMCPPFLAGS)

if (NOT SYM_COMPILE_IN_LP)
  set_source_files_properties(${ALL_LP} PROPERTIES LANGUAGE CXX)
  
  if (ENABLE_SHARED_LIBRARIES)
    add_library(libSym_lp SHARED ${ALL_LP})
  else ()
    add_library(libSym_lp STATIC ${ALL_LP})
  endif ()
  
  set_include_directories(libSym_lp)

  add_example(symphony_lp ${MAIN_SRC})
  #symphony_CPPFLAGS = $(PCPPFLAGS)

  install(TARGETS symphony_lp
          DESTINATION bin)

  install(TARGETS libSym_lp
          DESTINATION lib)
endif ()

if (NOT SYM_COMPILE_IN_CG)
  set_source_files_properties(${ALL_CG} PROPERTIES LANGUAGE CXX)
  
  if (ENABLE_SHARED_LIBRARIES)
    add_library(libSym_cg SHARED ${ALL_CG})
  else ()
    add_library(libSym_cg STATIC ${ALL_CG})
  endif ()
  
  set_include_directories(libSym_cg)

  add_example(symphony_cg ${MAIN_SRC})
  #symphony_CPPFLAGS = $(PCPPFLAGS)
  
  install(TARGETS symphony_cg
          DESTINATION bin)

  install(TARGETS libSym_cg
          DESTINATION lib)
endif ()

if (NOT SYM_COMPILE_IN_CP)
  set_source_files_properties(${ALL_CP} PROPERTIES LANGUAGE CXX)
  
  if (ENABLE_SHARED_LIBRARIES)
    add_library(libSym_cp SHARED ${ALL_CP})
  else ()
    add_library(libSym_cp STATIC ${ALL_CP})
  endif ()
  
  set_include_directories(libSym_cp)

  add_example(symphony_cp ${MAIN_SRC})
  #symphony_CPPFLAGS = $(PCPPFLAGS)
  
  install(TARGETS symphony_cp
          DESTINATION bin)

  install(TARGETS libSym_cp
          DESTINATION lib)
endif ()

if (NOT SYM_COMPILE_IN_TM)
  set_source_files_properties(${ALL_TM} PROPERTIES LANGUAGE CXX)
  
  if (ENABLE_SHARED_LIBRARIES)
    add_library(libSym_tm SHARED ${ALL_TM})
  else ()
    add_library(libSym_tm STATIC ${ALL_TM})
  endif ()
  
  set_include_directories(libSym_tm)

  add_example(symphony_tm ${MAIN_SRC})
  #symphony_CPPFLAGS = $(PCPPFLAGS)
  
  install(TARGETS symphony_tm
          DESTINATION bin)

  install(TARGETS libSym_tm
          DESTINATION lib)
endif ()

if (SYMPHONY_BUILD_EXAMPLES)
  macro(add_example Name)
    add_executable(${Name} ${ARGN})
    target_link_libraries(${Name} libSym libCgl libOsiClp libOsi libClp libCoinUtils)
    set_include_directories(${Name})
    if (COIN_HAS_LAPACK)
      target_link_libraries(${Name} lapack)
    endif ()
    if (COIN_HAS_BLAS)
      target_link_libraries(${Name} blas)
    endif ()
    if ((COIN_HAS_BLAS OR COIN_HAS_LAPACK) AND UNIX)
      target_link_libraries(${Name} gfortran)
    endif ()
    if (COINUTILS_HAS_ZLIB)
      target_link_libraries(${Name} ${ZLIB_NAME})
    endif ()
    if (COINUTILS_HAS_BZLIB)
      target_link_libraries(${Name} ${BZLIB_NAME})
    endif ()
    if (COIN_HAS_GLPK)
      target_link_libraries(${Name} glpk)
    endif ()
    if (COIN_HAS_AMD)
      target_link_libraries(${Name} amd)
    endif ()
    if (COIN_HAS_CHOLDMOD)
      target_link_libraries(${Name} cholmod)
    endif ()
    if (USE_OPENMP AND UNIX)
      target_link_libraries(${Name} gomp)
    endif ()
    if (COINUTILS_USE_THREADS)
      if (NOT WIN32)
	target_link_libraries(${Name} pthread)
      else ()
	target_link_libraries(${Name} pthreadVC2)
      endif ()
    endif ()
  endmacro ()
  
  add_example(bicriteria ${SYMPHONY_DIR}/SYMPHONY/Examples/bicriteria.c)

  add_test(NAME symphony_example_bicriteria
           COMMAND $<TARGET_FILE:bicriteria> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_bicriteria PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_bicriteria PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  add_example(milp ${SYMPHONY_DIR}/SYMPHONY/Examples/milp.c)
  
  add_test(NAME symphony_example_milp
           COMMAND $<TARGET_FILE:milp> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_milp PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_milp PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  add_example(milp2 ${SYMPHONY_DIR}/SYMPHONY/Examples/milp2.c)
  
  add_test(NAME symphony_example_milp2
           COMMAND $<TARGET_FILE:milp2> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_milp2 PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_milp2 PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  #add_example(milpOsi ${SYMPHONY_DIR}/SYMPHONY/Examples/milpOsi.c)
  #target_link_libraries(milpOsi libOsiSym libOsi libCgl libCoinUtils z bz2 libSym libCgl libCoinUtils libClp libOsiClp libCoinUtils libOsi)
  # 
  #add_test(NAME symphony_example_milpOsi
  #         COMMAND $<TARGET_FILE:milpOsi> ${CMAKE_SOURCE_DIR}/Data/Sample)
  #set_tests_properties(symphony_example_milpOsi PROPERTIES TIMEOUT 30)
  #if (WIN32)
  #  set_tests_properties(symphony_example_milpOsi PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  #endif ()
  
  
  #ERROR: Missing include files in milpOsi2
  #add_example(milpOsi2 ${SYMPHONY_DIR}/SYMPHONY/Examples/milpOsi2.c)
  #
  #add_test(NAME symphony_example_milpOsi2
  #         COMMAND $<TARGET_FILE:milpOsi2> ${CMAKE_SOURCE_DIR}/Data/Sample)
  #set_tests_properties(symphony_example_milpOsi2 PROPERTIES TIMEOUT 30)
  #if (WIN32)
  #  set_tests_properties(symphony_example_milpOsi2 PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  #endif ()
  #
  
  add_example(sensitivity ${SYMPHONY_DIR}/SYMPHONY/Examples/sensitivity.c)
  
  add_test(NAME symphony_example_sensitivity
           COMMAND $<TARGET_FILE:sensitivity> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_sensitivity PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_sensitivity PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  add_example(warm_start1 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start1.c)
  
  add_test(NAME symphony_example_warm_start1
           COMMAND $<TARGET_FILE:warm_start1> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_warm_start1 PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_warm_start1 PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  add_example(warm_start2 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start2.c)
  
  add_test(NAME symphony_example_warm_start2
           COMMAND $<TARGET_FILE:warm_start2> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_warm_start2 PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_warm_start2 PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  
  
  add_example(warm_start3 ${SYMPHONY_DIR}/SYMPHONY/Examples/warm_start3.c)
  
  add_test(NAME symphony_example_warm_start3
           COMMAND $<TARGET_FILE:warm_start3> ${CMAKE_SOURCE_DIR}/Data/Sample)
  set_tests_properties(symphony_example_warm_start3 PROPERTIES TIMEOUT 30)
  if (WIN32)
    set_tests_properties(symphony_example_warm_start3 PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
  endif ()
  set_tests_properties(symphony_example_warm_start3 PROPERTIES LABELS "LONG")
endif ()

install(TARGETS symphony
        DESTINATION bin)

install(TARGETS libSym
        DESTINATION lib)

install(TARGETS libOsiSym
        DESTINATION lib)

install(FILES ${Symphony_SRC_LIST_Headers} 
        DESTINATION include/coin)

# Perform some tests

# Create a directory to store results from tests
if (NOT EXISTS ${CMAKE_BINARY_DIR}/tests)
  make_directory(${CMAKE_BINARY_DIR}/tests)
endif()

# With MPS files

add_test(NAME afiro_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/afiro.mps -o ${CMAKE_BINARY_DIR}/tests/afiro.out)
set_tests_properties(afiro_mps PROPERTIES TIMEOUT 30)
set_tests_properties(afiro_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(afiro_mps  PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

# This test seems to be specific for Ipopt
#add_test(NAME conic_mps 
#         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/conic.mps -o ${CMAKE_BINARY_DIR}/tests/conic.out)
#set_tests_properties(conic_mps PROPERTIES TIMEOUT 30)
#set_tests_properties(conic_mps PROPERTIES LABELS "MPS")
#if (WIN32)
#  set_tests_properties(conic_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
#endif ()

add_test(NAME exmip1_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/exmip1.mps -o ${CMAKE_BINARY_DIR}/tests/exmip1.out)
set_tests_properties(exmip1_mps PROPERTIES TIMEOUT 30)
set_tests_properties(exmip1_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(exmip1_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME galenet_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/galenet.mps -o ${CMAKE_BINARY_DIR}/tests/galenet.out)
set_tests_properties(galenet_mps PROPERTIES TIMEOUT 30)
set_tests_properties(galenet_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(galenet_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME nw460_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/nw460.mps -o ${CMAKE_BINARY_DIR}/tests/nw460.out)
set_tests_properties(nw460_mps PROPERTIES TIMEOUT 30)
set_tests_properties(nw460_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(nw460_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME p0548_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/p0548.mps -o ${CMAKE_BINARY_DIR}/tests/p0548.out)
set_tests_properties(p0548_mps PROPERTIES TIMEOUT 30)
set_tests_properties(p0548_mps PROPERTIES LABEL "MPS")
if (WIN32)
  set_tests_properties(p0548_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME scOneInt_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/scOneInt.mps -o ${CMAKE_BINARY_DIR}/tests/scOneInt.out)
set_tests_properties(scOneInt_mps PROPERTIES TIMEOUT 30)
set_tests_properties(scOneInt_mps PROPERTIES TIMEOUT "MPS")
if (WIN32)
  set_tests_properties(scOneInt_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME tp3_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/tp3.mps -o ${CMAKE_BINARY_DIR}/tests/tp3.out)
set_tests_properties(tp3_mps PROPERTIES TIMEOUT 30)
set_tests_properties(tp3_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(tp3_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME wedding_16_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/wedding_16.mps -o ${CMAKE_BINARY_DIR}/tests/wedding_16.out)
set_tests_properties(wedding_16_mps PROPERTIES TIMEOUT 3000)
set_tests_properties(wedding_16_mps PROPERTIES LABELS "MPS;LONG")
if (WIN32)
  set_tests_properties(wedding_16_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME atm_5_10_1_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/atm_5_10_1.mps -o ${CMAKE_BINARY_DIR}/tests/atm_5_10_1.out)
set_tests_properties(atm_5_10_1_mps PROPERTIES TIMEOUT 30)
set_tests_properties(atm_5_10_1_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(atm_5_10_1_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME e226_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/e226.mps -o ${CMAKE_BINARY_DIR}/tests/e226.out)
set_tests_properties(e226_mps PROPERTIES TIMEOUT 30)
set_tests_properties(e226_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(e226_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME finnis_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/finnis.mps -o ${CMAKE_BINARY_DIR}/tests/finnis.out)
set_tests_properties(finnis_mps PROPERTIES TIMEOUT 30)
set_tests_properties(finnis_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(finnis_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME hello_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/hello.mps -o ${CMAKE_BINARY_DIR}/tests/hello.out)
set_tests_properties(hello_mps PROPERTIES TIMEOUT 30)
set_tests_properties(hello_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(hello_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME p0033_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/p0033.mps -o ${CMAKE_BINARY_DIR}/tests/p0033.out)
set_tests_properties(p0033_mps PROPERTIES TIMEOUT 30)
set_tests_properties(p0033_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(p0033_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME pack1_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/pack1.mps -o ${CMAKE_BINARY_DIR}/tests/pack1.out)
set_tests_properties(pack1_mps PROPERTIES TIMEOUT 30)
set_tests_properties(pack1_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(pack1_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME share2qp_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/share2qp.mps -o ${CMAKE_BINARY_DIR}/tests/share2qp.out)
set_tests_properties(share2qp_mps PROPERTIES TIMEOUT 30)
set_tests_properties(share2qp_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(share2qp_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME tp4_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/tp4.mps -o ${CMAKE_BINARY_DIR}/tests/tp4.out)
set_tests_properties(tp4_mps PROPERTIES TIMEOUT 30)
set_tests_properties(tp4_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(tp4_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME brandy_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/brandy.mps -o ${CMAKE_BINARY_DIR}/tests/brandy.out)
set_tests_properties(brandy_mps PROPERTIES TIMEOUT 30)
set_tests_properties(brandy_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(brandy_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME exmip1.5_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/exmip1.5.mps -o ${CMAKE_BINARY_DIR}/tests/exmip1.5.out)
set_tests_properties(exmip1.5_mps PROPERTIES TIMEOUT 30)
set_tests_properties(exmip1.5_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(exmip1.5_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME galenetbnds_mps 
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/galenetbnds.mps -o ${CMAKE_BINARY_DIR}/tests/galenetbnds.out)
set_tests_properties(galenetbnds_mps PROPERTIES TIMEOUT 30)
set_tests_properties(galenetbnds_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(galenetbnds_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME lseu_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/lseu.mps -o ${CMAKE_BINARY_DIR}/tests/lseu.out)
set_tests_properties(lseu_mps PROPERTIES TIMEOUT 30)
set_tests_properties(lseu_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(lseu_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME p0201_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/p0201.mps -o ${CMAKE_BINARY_DIR}/tests/p0201.out)
set_tests_properties(p0201_mps PROPERTIES TIMEOUT 30)
set_tests_properties(p0201_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(p0201_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME retail3_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/retail3.mps -o ${CMAKE_BINARY_DIR}/tests/retail3.out)
set_tests_properties(retail3_mps PROPERTIES TIMEOUT 3000)
set_tests_properties(retail3_mps PROPERTIES LABELS "MPS;LONG")
if (WIN32)
  set_tests_properties(retail3_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME spec_sections_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/spec_sections.mps -o ${CMAKE_BINARY_DIR}/tests/spec_sections.out)
set_tests_properties(spec_sections_mps PROPERTIES TIMEOUT 30)
set_tests_properties(spec_sections_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(spec_sections_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

add_test(NAME tp5_mps
         COMMAND $<TARGET_FILE:symphony> -F ${CMAKE_SOURCE_DIR}/Data/Sample/tp5.mps -o ${CMAKE_BINARY_DIR}/tests/tp5.out)
set_tests_properties(tp5_mps PROPERTIES TIMEOUT 30)
set_tests_properties(tp5_mps PROPERTIES LABELS "MPS")
if (WIN32)
  set_tests_properties(tp5_mps PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()

# With LP files

add_test(NAME exmip1_lp 
         COMMAND $<TARGET_FILE:symphony> -L ${CMAKE_SOURCE_DIR}/Data/Sample/exmip1.lp -o ${CMAKE_BINARY_DIR}/tests/exmip1_lp.out)
set_tests_properties(exmip1_lp PROPERTIES TIMEOUT 30)
set_tests_properties(exmip1_lp PROPERTIES LABELS "LP")
if (WIN32)
  set_tests_properties(exmip1_lp PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/Dependencies/lib\\;${CMAKE_BINARY_DIR}/Dependencies/bin")
endif ()


